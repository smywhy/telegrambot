import logging
from aiogram.types import Message
from aiogram import Bot, types, Dispatcher
from aiogram.dispatcher import Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.utils.exceptions import RetryAfter

logger = logging.getLogger(__name__)

bot = Bot(token='6217757600:AAF-7GlvaahttkdTbm2BCrUCN3IWusFAH2E')

dp = Dispatcher(bot)

white_square = '‚¨ú'
circle = '‚≠ï'
X = '‚ùå'

# inline buttons
b1 = InlineKeyboardButton(white_square, callback_data='1')
b2 = InlineKeyboardButton(white_square, callback_data='2')
b3 = InlineKeyboardButton(white_square, callback_data='3')
b4 = InlineKeyboardButton(white_square, callback_data='4')
b5 = InlineKeyboardButton(white_square, callback_data='5')
b6 = InlineKeyboardButton(white_square, callback_data='6')
b7 = InlineKeyboardButton(white_square, callback_data='7')
b8 = InlineKeyboardButton(white_square, callback_data='8')
b9 = InlineKeyboardButton(white_square, callback_data='9')
c1 = InlineKeyboardButton('games')
d1 = InlineKeyboardButton
inline_buttons = [b1, b2, b3, b4, b5, b6, b7, b8, b9]
# filling the field with buttons
inline_kb_full = InlineKeyboardMarkup(row_width=3).add(b1, b2, b3)
inline_kb_full.add(b4, b5, b6)
inline_kb_full.add(b7, b8, b9)

all_users = set()
my_win_tictac = 0


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=["start"])
async def process(message: types.Message):
    username = message.from_user.username
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç @{username}üëãüèª\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ã, –∂–º–∞–∫–∞–π —Å—é–¥–∞ üëâüèª ‚Äî /games\n'
                         f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω üë®‚Äçüë©‚Äçüëß‚Äçüë¶ ‚Äî /online\n'
                         f'–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å ‚úâÔ∏è ‚Äî /my\n'
                         f'–ù–∞—à–∏ –ø–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ ‚Äî /soon\n\n'
                         f'–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ–∏ üí°,—Ç–æ –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –º–Ω–µ –∏—Ö –∑–¥–µ—Å—å ‚Äî @smywhy\n\n'
                         f'–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —ç—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞–ª–æ—Å—å –±—ã—Å—Ç—Ä–µ–µ ‚è≠, —Ç–æ –∑–∞–∫–∏–¥—ã–≤–∞–π—Ç–µ –¥–æ–Ω–∞—Ç–∏–∫ –ø–æ –Ω–æ–º–µ—Ä—É +79827001917')


@dp.message_handler(commands=['soon'])
async def process4(message: types.Message):
    await message.answer(f'\n1. –î–æ–±–∞–≤–∏–º –¥—Ä—É–≥–∏–µ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–≥—Ä—ãüéØüé≤üé∞ \n'
                         f'2. –î–æ–±–∞–≤–∏–º –≤–∞–ª—é—Ç—É üí∏,—á—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –≤ –∏–≥—Ä–∞—Ö\n'
                         f'3. –î–æ–±–∞–≤–∏–º –≤–≤–æ–¥ –∏ –≤—ã–≤–æ–¥ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤üì≤\n\n'
                         f'–£–¥–∞—á–Ω—ã—Ö –≤–∞–º –∏–≥—Ä –Ω–∞ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ')


@dp.message_handler(commands=['games'])
async def process2(message: types.Message):
    await message.answer(f'–ù–∞ –≤—ã–±–æ—Ä —É –Ω–∞—Å –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –¥–≤–µ –∏–≥—Ä—ã üò∞ \nüëâüèª /tictactoe \nüëâüèª /seabattle')


@dp.message_handler(commands=['my'])
async def process3(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, –¥–∞ —ç—Ç–æ —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å! \n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å —Ç–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –∞ –∏–º–µ–Ω–Ω–æ –ø–æ–±–µ–¥—ã')


@dp.message_handler(commands=['tictactoe'])
async def process_command_1(message: types.Message):
    renew_field()
    global user1id, user1name, mid, cid, msg
    user1name = message.from_user.first_name
    user1id = message.from_user.id
    cid = message.chat.id
    msg = await message.answer(f"–ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫1Ô∏è1Ô∏è‚É£: {user1name} ‚ùå\n–í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫: ... ‚≠ïÔ∏è",
                               reply_markup=inline_kb_full)
    mid = msg.message_id


@dp.callback_query_handler(lambda c: c.data)
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    code = int(callback_query.data)
    global user2name
    user2name = callback_query.from_user.first_name
    if count_white_squares() == 8 and user2name != user1name:
        try:
            await bot.edit_message_text(message_id=mid, chat_id=cid,
                                        text=f"1st player: {user1name}‚ùå\n2nd player: {user2name}‚≠ïÔ∏è",
                                        reply_markup=inline_kb_full)
        except Exception:
            print('Flood in line 58')
    if callback_query.from_user.id == user1id:
        if count_white_squares() in [9, 7, 5, 3, 1]:
            step = user1_steps(code)
            if step == False:
                await bot.answer_callback_query(callback_query.id, text="You can't change your oponent's sign")
            else:
                try:
                    await bot.edit_message_reply_markup(message_id=mid, chat_id=cid, reply_markup=inline_kb_full)
                except RetryAfter:
                    print('Flood in line 68')
        elif count_white_squares() not in [9, 7, 5, 3, 1]:
            await bot.answer_callback_query(callback_query.id, text="It's not your turn")

    if callback_query.from_user.id != user1id:
        if count_white_squares() not in [9, 7, 5, 3, 1]:
            step = user2_steps(code)
            if step == False:
                await bot.answer_callback_query(callback_query.id, text="You can't change your opponent's sign")
            else:
                try:
                    await bot.edit_message_reply_markup(message_id=mid, chat_id=cid, reply_markup=inline_kb_full)
                except RetryAfter:
                    print('Flood line 81')
        elif count_white_squares() in [9, 7, 5, 3, 1]:
            await bot.answer_callback_query(callback_query.id, text="It's not your turn")
    if count_white_squares() < 5:
        await check_game()


async def check_game():
    # win cases
    if b1.text == b2.text == b3.text != white_square or b1.text == b4.text == b7.text != white_square or \
            b1.text == b5.text == b9.text != white_square or b2.text == b5.text == b8.text != white_square or \
            b3.text == b5.text == b7.text != white_square or b4.text == b5.text == b6.text != white_square or \
            b7.text == b8.text == b9.text != white_square or b3.text == b6.text == b9.text != white_square:
        await end_game('win')
    else:
        if count_white_squares() == 0:
            # tie case
            await end_game('tie')


async def end_game(status):
    if status == 'win':
        winner = get_current_user()
        await announce_winner(winner)
        winss = my_win_tictac + 1
    else:
        await bot.delete_message(chat_id=cid, message_id=mid)
        await bot.send_message(chat_id=cid,
                               text=f'Tie ü§ù \n{b1.text}{b2.text}{b3.text}\n{b4.text}{b5.text}{b6.text}\n{b7.text}{b8.text}{b9.text}')


def get_current_user():
    if count_white_squares() % 2 == 0:
        return user1name
    else:
        return user2name


async def announce_winner(winner):
    await bot.delete_message(chat_id=cid, message_id=mid)
    await bot.send_message(chat_id=cid,
                           text=f'The winner is {winner} üèÜ\n{b1.text}{b2.text}{b3.text}\n{b4.text}{b5.text}{b6.text}\n{b7.text}{b8.text}{b9.text}')


def count_white_squares():
    counter = 0
    for btn in inline_buttons:
        if btn.text == white_square:
            counter += 1
    return counter


def renew_field():
    for btn in inline_buttons:
        btn.text = white_square


def user1_steps(x):
    btn = eval('b' + str(x))
    if btn.text == white_square:
        btn.text = X
    else:
        return False


def user2_steps(x):
    btn = eval('b' + str(x))
    if btn.text == white_square:
        btn.text = circle
    else:
        return False


# flood control
def __send_message(text: str, chat_id: int, parse_mode: str = None, update=None, context=None):
    if update:
        try:
            update.message.reply_text(text=text,
                                      parse_mode=parse_mode)
        except Exception:  # ignore users who spam in private chat
            pass
    else:
        logger.error('No update or context to send the message.')


# name getter
@dp.message_handler(commands=['id'])
async def get_user_name(message: types.Message):
    keyboard_markup = types.InlineKeyboardMarkup()
    await message.answer(f"name: {message.from_user.first_name}", reply_markup=keyboard_markup)


if __name__ == '__main__':
    executor.start_polling(dp)
